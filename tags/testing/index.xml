<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Pratik Deoghare</title>
    <link>https://pratik.deoghare.com/tags/testing/</link>
    <description>Pratik Deoghare (testing)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 May 2021 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://pratik.deoghare.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Embedding Golang Interfaces Into Structs To Simplify Testing</title>
      <link>https://pratik.deoghare.com/posts/interface/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pratik.deoghare.com/posts/interface/</guid>
      <description>&lt;p&gt;You can embed an interface inside a struct in golang. I discovered it by accident not by reading the manual.&lt;/p&gt;
&lt;p&gt;Here is a problem that it solves. There are many more in &lt;a href=&#34;https://eli.thegreenplace.net/2020/embedding-in-go-part-3-interfaces-in-structs/&#34;&gt;Embedding in Go: Part 3 - interfaces in structs &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have a dependency on an external library. The library exports a large interface. You want to mock it for testing but then you will have to implement all the methods on it. That can be a lot of work. What if you could implement just the methods you need?&lt;/p&gt;
&lt;p&gt;You can do that by embedding interfaces like this. You embed &lt;code&gt;LargeExternalClient&lt;/code&gt; interface into &lt;code&gt;mockClient&lt;/code&gt;, then implement only &lt;code&gt;MethodF&lt;/code&gt; from the interface because that is the only one &lt;code&gt;YourClient&lt;/code&gt; uses. If somewhere in the code some other method on the interface is in use without your knowledge and you don&amp;rsquo;t implement it on &lt;code&gt;mockClient&lt;/code&gt;, you will get a panic. A good thing. Then you just add that one. Test won&amp;rsquo;t silently pass.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/YqlBS6oRME8&#34;&gt;Playground link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;testing&amp;quot;
)

// somewhere in the imported library.go

type LargeExternalClient interface {
    MethodA()
    MethodB()
    MethodC()
    MethodD()
    MethodE()
    MethodF() int
    MethodG()
    MethodH()
    MethodI()
}

// code.go
type YourClient struct {
    cli LargeExternalClient
}

func (y YourClient) Foo() int {
    return y.cli.MethodF()
}

// code_test.go

type mockClient struct {
    LargeExternalClient
}

func (mockClient) MethodF() int {
    return 23
}

func TestYourClient(t *testing.T) {
    y := YourClient{
        cli: new(mockClient),
    }

    if y.Foo() != 23 {
        t.Fail()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
