<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on Pratik Deoghare</title>
    <link>https://pratik.deoghare.com/tags/math/</link>
    <description>Pratik Deoghare (math)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jul 2023 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://pratik.deoghare.com/tags/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why Doesn&#39;t The Simple Formula Work?</title>
      <link>https://pratik.deoghare.com/posts/sum35/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pratik.deoghare.com/posts/sum35/</guid>
      <description>&lt;p&gt;Problem: Write a program to find sum of all multiples of 3 and 5 upto input n.
If a number is multiple of both 3 and 5 add it only once.&lt;/p&gt;
&lt;p&gt;We were given this problem at work. I tried to “solve” it using math. Clearly,
we can add all the multiples of 3 and 5 upto n and subtract multiples of 15 once
to account for the overcounting. We could derive formula for this as follows:&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}
f(n) &amp;amp;= (3 + 6 + 9 + \ldots) + (5 + 10 + 15 + \ldots) - (15 + 30 + 45 + \ldots) \newline
&amp;amp;= 3(1 + 2 + 3 + \ldots) + 5(1 + 2 + 3 + \ldots)   - 15 (1 + 2 + 3 + \ldots) \newline
&amp;amp;= 3S(n/3) + 5S(n/5) - 15S(n/15)  \text{, where } S(k) := \frac{1}{2} k (k + 1) \newline
&amp;amp;= 3 \times \frac{1}{2} \frac{n}{3} \left( \frac{n}{3} + 1\right)
+ 5 \times \frac{1}{2} \frac{n}{5} \left( \frac{n}{5} + 1\right)
- 15 \times \frac{1}{2} \frac{n}{15} \left( \frac{n}{3} + 1\right)
\newline
&amp;amp;= \frac{n}{2} \left( \frac{n}{3} + 1 + \frac{n}{5} + 1 - \frac{n}{15} - 1  \right) \newline
&amp;amp;= \frac{n}{2} \left( \frac{n}{3} +\frac{n}{5} - \frac{n}{15} + 1  \right)
\end{aligned}$$&lt;/p&gt;
&lt;p&gt;We write code to do the calculations for us like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def s(n):
    return (n * (n + 1)) // 2

def ss(n):
    return 3 * s(n//3) + 5 * s(n//5) - 15 * s(n//15)

def sss(n):
    return (n // 2) * ( n // 3 + n // 5 - n // 15 + 1)

tests = [(3, 3), (5,8),(0,0), (10,23+10), (1000, 233168+1000)]

for (n, expected) in tests:
    print(n, expected, ss(n), sss(n))

# print(n, expected, ss(n))
assert ss(n) == expected

# Outputs:
# 3 3 3 2
# 5 8 8 6
# 0 0 0 0
# 10 33 33 30
# 1000 234168 234168 234000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can you figure out why &lt;code&gt;ss&lt;/code&gt; gives the right answer but &lt;code&gt;sss&lt;/code&gt; doesn’t? Math is
straightforward isn’t it? Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Complex Numbers to Move Mars Rover</title>
      <link>https://pratik.deoghare.com/posts/complex-mars-rover/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pratik.deoghare.com/posts/complex-mars-rover/</guid>
      <description>&lt;p&gt;Recently I was given &lt;a href=&#34;https://code.google.com/archive/p/marsrovertechchallenge/&#34;&gt;Mars Rover Problem&lt;/a&gt; and told that my solution was pretty cool. Before that I assumed this is how everybody else was doing it ;). Here is &lt;a href=&#34;https://github.com/pratikdeoghare/mars-rover-problem&#34;&gt;golang implementation&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2 id=&#34;design&#34; &gt;Design
&lt;span&gt;
    &lt;a href=&#34;#design&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Position and orientation are represented as complex numbers implemented as &lt;code&gt;type vect&lt;/code&gt;. Builtin complex type is not used because it uses floats which they can&amp;rsquo;t be compared easily.&lt;/p&gt;
&lt;p&gt;In calculations below $j = \sqrt{-1}$.&lt;/p&gt;
&lt;h3 id=&#34;multiplication-of-complex-numbers-allow-us-to-rotate&#34; &gt;Multiplication of complex numbers allow us to rotate.
&lt;span&gt;
    &lt;a href=&#34;#multiplication-of-complex-numbers-allow-us-to-rotate&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;$L$: To rotate by $90^o$ left we multiply by $j$.&lt;/p&gt;
&lt;p&gt;$R$: To rotate by $90^o$ right we multiply by $-j$.&lt;/p&gt;
&lt;p&gt;Mapping of directions to complex numbers.&lt;/p&gt;
&lt;p&gt;$North = j$&lt;/p&gt;
&lt;p&gt;$East = 1$&lt;/p&gt;
&lt;p&gt;$West = -1$&lt;/p&gt;
&lt;p&gt;$South = -j$&lt;/p&gt;
&lt;p&gt;Example: A rover is looking $North$ and we issue $R$ command. We expect the rover to look $East$.&lt;/p&gt;
&lt;p&gt;$$ North * R
= j * -j
= 1
= East $$  Position unchanged.&lt;/p&gt;
&lt;h3 id=&#34;addition-of-complex-numbers-allow-for-movements-on-the-grid&#34; &gt;Addition of complex numbers allow for movements on the grid.
&lt;span&gt;
    &lt;a href=&#34;#addition-of-complex-numbers-allow-for-movements-on-the-grid&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Example: A rover is at $(1,2)$ looking to $East$ and we issue $M$ command we expect it to be at $(2,2)$.&lt;/p&gt;
&lt;p&gt;$$ \text{Rover positioned at} \ (1,1) + E
= (1 + 2j) + 1
= 2 + 2j
= (2, 2) $$  Orientation unchanged.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
