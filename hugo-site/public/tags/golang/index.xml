<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Pratik Deoghare</title>
    <link>https://pratik.deoghare.com/tags/golang/</link>
    <description>Pratik Deoghare (golang)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 May 2021 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://pratik.deoghare.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Iterating Over A Trie With Channels And Goroutines</title>
      <link>https://pratik.deoghare.com/posts/iter/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pratik.deoghare.com/posts/iter/</guid>
      <description>&lt;p&gt;We have a trie that stores set of integer slices. We want an iterator over its items.&lt;/p&gt;
&lt;p&gt;What we do here is have one goroutine to walk over the trie and send the items over channel. Other goroutine pulls the items from the channel and prints them out.&lt;/p&gt;
&lt;p&gt;My mental image of this is one gopher jumping around a tree and throwing mangoes back at his friend on the ground.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t have to be a tree or trie. We can iterate over any structure like this. Golang makes it easy to think about such things.&lt;/p&gt;
&lt;p&gt;This has been suggested before and there are some problems with it as pointed out &lt;a href=&#34;https://github.com/golang/go/issues/43557#issuecomment-755784044&#34;&gt;here&lt;/a&gt;. In this post however I only wanted demonstrate this interesting way of thinking and not worry about performance and other issues.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// goroutine that sends the items over the channel

func (t setSliceInt) Iter() chan []int {
    ch := make(chan []int)
    go t.iter(nil, ch)
    return ch
}

func (t setSliceInt) iter(acc []int, ch chan []int) &amp;lt;-chan []int {
    if t.end {
        ch &amp;lt;- acc
    }

    for k, v := range t.kids {
        v.iter(append(acc, k), ch)
    }

    if len(acc) == 0 {
        close(ch)
    }

    return ch
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Â &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// some other goroutine pulls the items and prints

...
    for item := range t.Iter() {
        fmt.Println(item)
    }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full code bewlow and &lt;a href=&#34;https://play.golang.org/p/QMQJRchVYLY&#34;&gt;in the playground&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

// Set of []int.
// Slices of integers are strings made up of integers.
// We can use trie to represent their set.
// Add, Remove, Membership checking are all linear in the length of
// the element and don&#39;t depend on the number of items in the set.

type setSliceInt struct {
    end  bool
    kids map[int]*setSliceInt
}

func (t setSliceInt) Has(xs []int) bool {
    if len(xs) == 0 {
        return t.end
    }

    v, ok := t.kids[xs[0]]
    return ok &amp;amp;&amp;amp; v.Has(xs[1:])
}

func (t *setSliceInt) Remove(xs []int) {
    if len(xs) == 0 {
        t.end = false
        return
    }

    v, ok := t.kids[xs[0]]
    if !ok {
        return
    }

    v.Remove(xs[1:])

    if !v.end &amp;amp;&amp;amp; len(v.kids) == 0 {
        delete(t.kids, xs[0])
    }

}

func (t *setSliceInt) Add(xs []int) {
    if len(xs) == 0 {
        t.end = true
        return
    }

    if t.kids == nil {
        t.kids = make(map[int]*setSliceInt)
    }

    _, ok := t.kids[xs[0]]
    if !ok {
        t.kids[xs[0]] = new(setSliceInt)
    }

    t.kids[xs[0]].Add(xs[1:])
}

func (t setSliceInt) String() string {
    return str(t, &amp;quot;&amp;quot;)
}

func str(t setSliceInt, tabs string) string {
    var ks string
    for k, v := range t.kids {
        if v.end {
            ks += fmt.Sprintf(&amp;quot;%s (%d) \n %s&amp;quot;, tabs, k, str(*v, tabs+&amp;quot; &amp;quot;))
        } else {
            ks += fmt.Sprintf(&amp;quot;%s %d \n %s&amp;quot;, tabs, k, str(*v, tabs+&amp;quot; &amp;quot;))
        }
    }
    return ks
}

func (t setSliceInt) Iter() chan []int {
    ch := make(chan []int)
    go t.iter(nil, ch)
    return ch
}

func (t setSliceInt) iter(acc []int, ch chan []int) &amp;lt;-chan []int {
    if t.end {
        ch &amp;lt;- acc
    }

    for k, v := range t.kids {
        v.iter(append(acc, k), ch)
    }

    if len(acc) == 0 {
        close(ch)
    }

    return ch
}

func main() {
    t := new(setSliceInt)

    t.Add([]int{1, 2, 3, 4})
    t.Add([]int{23, 3, 3})
    t.Add([]int{1, 2, 3})
    fmt.Println(t)
    fmt.Println(t.Has([]int{1, 2, 3, 4}))
    t.Remove([]int{1, 2, 3, 4})
    fmt.Println(t)

    for item := range t.Iter() {
        fmt.Println(item)
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Embedding Golang Interfaces Into Structs To Simplify Testing</title>
      <link>https://pratik.deoghare.com/posts/interface/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pratik.deoghare.com/posts/interface/</guid>
      <description>&lt;p&gt;You can embed an interface inside a struct in golang. I discovered it by accident not by reading the manual.&lt;/p&gt;
&lt;p&gt;Here is a problem that it solves. There are many more in &lt;a href=&#34;https://eli.thegreenplace.net/2020/embedding-in-go-part-3-interfaces-in-structs/&#34;&gt;Embedding in Go: Part 3 - interfaces in structs &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have a dependency on an external library. The library exports a large interface. You want to mock it for testing but then you will have to implement all the methods on it. That can be a lot of work. What if you could implement just the methods you need?&lt;/p&gt;
&lt;p&gt;You can do that by embedding interfaces like this. You embed &lt;code&gt;LargeExternalClient&lt;/code&gt; interface into &lt;code&gt;mockClient&lt;/code&gt;, then implement only &lt;code&gt;MethodF&lt;/code&gt; from the interface because that is the only one &lt;code&gt;YourClient&lt;/code&gt; uses. If somewhere in the code some other method on the interface is in use without your knowledge and you don&amp;rsquo;t implement it on &lt;code&gt;mockClient&lt;/code&gt;, you will get a panic. A good thing. Then you just add that one. Test won&amp;rsquo;t silently pass.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/YqlBS6oRME8&#34;&gt;Playground link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;testing&amp;quot;
)

// somewhere in the imported library.go

type LargeExternalClient interface {
    MethodA()
    MethodB()
    MethodC()
    MethodD()
    MethodE()
    MethodF() int
    MethodG()
    MethodH()
    MethodI()
}

// code.go
type YourClient struct {
    cli LargeExternalClient
}

func (y YourClient) Foo() int {
    return y.cli.MethodF()
}

// code_test.go

type mockClient struct {
    LargeExternalClient
}

func (mockClient) MethodF() int {
    return 23
}

func TestYourClient(t *testing.T) {
    y := YourClient{
        cli: new(mockClient),
    }

    if y.Foo() != 23 {
        t.Fail()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A Generic Red-Black Tree Implementation In Golang</title>
      <link>https://pratik.deoghare.com/posts/go2redblack/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pratik.deoghare.com/posts/go2redblack/</guid>
      <description>&lt;p&gt;To balance the tree CLRS implementation rotates the subtrees. The functional implementations rewrites the tree [1,2]. Thinking in terms of rewriting instead of rotating feels like looking at the problem in a proper coordinate system. My implementation here is translation of Matt Might&amp;rsquo;s Haskell code in go.&lt;/p&gt;
&lt;p&gt;The generics syntax is easy on eyes. I like it.&lt;/p&gt;
&lt;h2 id=&#34;references&#34; &gt;References
&lt;span&gt;
    &lt;a href=&#34;#references&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://matt.might.net/articles/red-black-delete/&#34;&gt;The missing method: Deleting from Okasaki&amp;rsquo;s red-black trees by Matt Might&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/redblack99.pdf&#34;&gt;Red-Black Trees in a Functional Setting by Okasaki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/generics-next-step&#34;&gt;The Next Step for Generics by Ian Lance Taylor and Robert Griesemer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;code&#34; &gt;Code
&lt;span&gt;
    &lt;a href=&#34;#code&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://go2goplay.golang.org/p/3Jmkjh5RHFs&#34;&gt;Playground link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// A generic red-black tree implementation from the
// functional implementation by Matt Might[1] and Okasaki.
//
// [1] http://matt.might.net/articles/red-black-delete/
//
// Author: Pratik Deoghare


package main

import (
    &amp;quot;fmt&amp;quot;
)

type Map[K, V any] interface {
    Get(key K) (value V, ok bool)
    Set(key K, value V)
    Delete(key K)
}

func New[K, V any](less func(K, K) bool) Map[K, V] {
    leaf := &amp;amp;node[K, V]{
        color: B,
    }
    leaf.a = leaf
    leaf.b = leaf
    bbleaf := &amp;amp;node[K, V]{
        color: BB,
    }
    bbleaf.a = leaf
    bbleaf.b = leaf
    return &amp;amp;rbmap[K, V]{
        less:   less,
        leaf:   leaf,
        bbleaf: bbleaf,
        root:   leaf,
    }
}

type color uint8

const (
    R  color = 0
    B  color = 1
    BB color = 2
    NB color = 3
)

type node[K, V any] struct {
    color color
    key   K
    value V
    a     *node[K, V]
    b     *node[K, V]
}
type rbmap[K, V any] struct {
    root   *node[K, V]
    leaf   *node[K, V] // the leaf always Black. We don&#39;t touch it. Its a sacred leaf.
    bbleaf *node[K, V] // this is used for deletion
    less   func(K, K) bool
}

func (r rbmap[K, V]) Preorder() {
    r.preorder(r.root, &amp;quot;&amp;quot;)
}
func (r rbmap[K, V]) preorder(n *node[K, V], tab string) {
    if n == r.leaf {
        return
    }
    fmt.Println(tab, n.key, &amp;quot;=&amp;gt;&amp;quot;, n.value, n.color)
    r.preorder(n.a, &amp;quot;:&amp;quot;+tab)
    r.preorder(n.b, &amp;quot;:&amp;quot;+tab)
}
func (r rbmap[K, V]) Inorder() {
    panic(&amp;quot;implement me&amp;quot;)
}
func (r rbmap[K, V]) Get(key K) (value V, ok bool) {
    n := r.root
    for n != r.leaf {
        if r.less(key, n.key) {
            n = n.a
        } else if r.less(n.key, key) {
            n = n.b
        } else {
            return n.value, true
        }
    }
    return Nil[V](), false
}
func Nil[T any]() T {
    var zero T
    return zero
}
func (r *rbmap[K, V]) Set(key K, value V) {
    r.root = blacken(r.insert(r.root, key, value))
}
func blacken[K, V any](n *node[K, V]) *node[K, V] {
    n.color = B
    return n
}
func redden[K, V any](n *node[K, V]) *node[K, V] {
    n.color = R
    return n
}
func (r *rbmap[K, V]) insert(n *node[K, V], key K, value V) *node[K, V] {
    if n == r.leaf {
        return &amp;amp;node[K, V]{
            color: R,
            key:   key,
            value: value,
            a:     r.leaf,
            b:     r.leaf,
        }
    }
    if r.less(key, n.key) {
        n.a = r.insert(n.a, key, value)
        n = balance(n)
    } else if r.less(n.key, key) {
        n.b = r.insert(n.b, key, value)
        n = balance(n)
    } else {
        n.value = value
    }
    return n
}
func colors[K, V any](n1, n2, n3 *node[K, V], c1, c2, c3 color) bool {
    return n1.color == c1 &amp;amp;&amp;amp; n2.color == c2 &amp;amp;&amp;amp; n3.color == c3
}
func balance[K, V any](n *node[K, V]) *node[K, V] {
    var x, y, z *node[K, V]
    var a, b, c, d *node[K, V]
    okasakiCase := false
    switch {
    case colors(n, n.a, n.a.a, B, R, R):
        x, y, z = n.a.a, n.a, n
        a, b, c, d = x.a, x.b, y.b, z.b
        okasakiCase = true
    case colors(n, n.a, n.a.b, B, R, R):
        x, y, z = n.a, n.a.b, n
        a, b, c, d = x.a, y.a, y.b, z.b
        okasakiCase = true
    case colors(n, n.b, n.b.a, B, R, R):
        x, y, z = n, n.b.a, n.b
        a, b, c, d = x.a, y.a, y.b, z.b
        okasakiCase = true
    case colors(n, n.b, n.b.b, B, R, R):
        x, y, z = n, n.b, n.b.b
        a, b, c, d = x.a, y.a, z.a, z.b
        okasakiCase = true
    }
    if okasakiCase {
        x.a, x.b, z.a, z.b = a, b, c, d
        y.a, y.b = x, z
        x.color, y.color, z.color = B, R, B
        return y
    }
    mightCase := false
    switch {
    case colors(n, n.a, n.a.a, BB, R, R):
        x, y, z = n.a.a, n.a, n
        a, b, c, d = x.a, x.b, y.b, z.b
        mightCase = true
    case colors(n, n.a, n.a.b, BB, R, R):
        x, y, z = n.a, n.a.b, n
        a, b, c, d = x.a, y.a, y.b, z.b
        mightCase = true
    case colors(n, n.b, n.b.a, BB, R, R):
        x, y, z = n, n.b.a, n.b
        a, b, c, d = x.a, y.a, y.b, z.b
        mightCase = true
    case colors(n, n.b, n.b.b, BB, R, R):
        x, y, z = n, n.b, n.b.b
        a, b, c, d = x.a, y.a, z.a, z.b
        mightCase = true
    default:
        c1, ok := deleteCaseI(n)
        if ok {
            return c1
        }
        c2, ok := deleteCaseII(n)
        if ok {
            return c2
        }
    }
    if mightCase {
        x.a, x.b, z.a, z.b = a, b, c, d
        y.a, y.b = x, z
        x.color, y.color, z.color = B, B, B
        return y
    }
    return n
}
func deleteCaseI[K, V any](n *node[K, V]) (*node[K, V], bool) {
    cond := n.color == BB &amp;amp;&amp;amp; n.b.color == NB &amp;amp;&amp;amp; n.b.a.color == B &amp;amp;&amp;amp; n.b.b.color == B
    if !cond {
        return n, false
    }
    x, y, z := n, n.b.a, n.b
    a, b, c, d := x.a, y.a, y.b, z.b
    x.a, x.b = a, b
    z.a, z.b = c, redden(d)
    z.color = B
    y.a, y.b = x, balance(z)
    x.color, y.color, z.color = B, B, B
    return y, true
}
func deleteCaseII[K, V any](n *node[K, V]) (*node[K, V], bool) {
    cond := n.color == BB &amp;amp;&amp;amp; n.a.color == NB &amp;amp;&amp;amp; n.a.a.color == B &amp;amp;&amp;amp; n.a.b.color == B
    if !cond {
        return n, false
    }
    x, y, z := n.a, n.a.b, n
    a, b, c, d := x.a, y.a, y.b, z.b
    x.a, x.b = redden(a), b
    z.a, z.b = c, d
    x.color = B
    y.a, y.b = balance(x), z
    x.color, y.color, z.color = B, B, B
    return y, true
}
func (r *rbmap[K, V]) Delete(key K) {
    r.root = blacken(r.del(r.root, key))
}
func (r *rbmap[K, V]) del(n *node[K, V], key K) *node[K, V] {
    if n == r.leaf {
        return r.leaf
    }
    if r.less(key, n.key) {
        n.a = r.del(n.a, key)
        n = r.bubble(n)
    } else if r.less(n.key, key) {
        n.b = r.del(n.b, key)
        n = r.bubble(n)
    } else {
        return r.remove(n)
    }
    return n
}
func (r *rbmap[K, V]) remove(n *node[K, V]) *node[K, V] {
    //fmt.Println(&amp;quot;remove: &amp;quot;)
    //r.Preorder()
    //fmt.Println()
    if n == r.leaf {
        return r.leaf
    }
    if n.color == R &amp;amp;&amp;amp; n.a == r.leaf &amp;amp;&amp;amp; n.b == r.leaf {
        return r.leaf
    }
    if n.color == B &amp;amp;&amp;amp; n.a == r.leaf &amp;amp;&amp;amp; n.b == r.leaf {
        return r.bbleaf
    }
    if n.color == B &amp;amp;&amp;amp; n.a == r.leaf &amp;amp;&amp;amp; n.b != r.leaf &amp;amp;&amp;amp; n.b.color == R {
        n.b.color = B
        return n.b
    }
    if n.color == B &amp;amp;&amp;amp; n.b == r.leaf &amp;amp;&amp;amp; n.a != r.leaf &amp;amp;&amp;amp; n.a.color == R {
        n.a.color = B
        return n.a
    }
    //chasing same pointers twice. can optimize by
    // making max return a *node and passing that in to removeMax.
    n.key, n.value = r.max(n.a)
    n.a = r.removeMax(n.a)
    n = r.bubble(n)
    return n
}
func (r *rbmap[K, V]) max(n *node[K, V]) (K, V) {
    for n.b != r.leaf {
        n = n.b
    }
    return n.key, n.value
}
func (r *rbmap[K, V]) removeMax(n *node[K, V]) *node[K, V] {
    if n.b == r.leaf {
        return r.remove(n)
    }
    n.b = r.removeMax(n.b)
    return r.bubble(n)
}
func (r *rbmap[K, V]) bubble(n *node[K, V]) *node[K, V] {
    //fmt.Println(&amp;quot;remove: &amp;quot;)
    //r.Preorder()
    //fmt.Println()
    if n.a.color == BB || n.b.color == BB {
        n.color = blacker(n.color)
        n.a = r.redder(n.a)
        n.b = r.redder(n.b)
        return balance(n)
    }
    return balance(n)
}
func (r *rbmap[K, V]) redder(n *node[K, V]) *node[K, V] {
    if n == r.bbleaf {
        return r.leaf
    }
    n.color = redder(n.color)
    return n
}
func redder(c color) color {
    switch c {
    case R:
        return NB
    case B:
        return R
    case BB:
        return B
    case NB:
        // can&#39;t happen
        panic(&amp;quot;impossible&amp;quot;)
    }
    panic(&amp;quot;why come here&amp;quot;)
}
func blacker(c color) color {
    switch c {
    case NB:
        return R
    case R:
        return B
    case B:
        return BB
    default:
        // BB cannot be blackened further
        panic(&amp;quot;unmÃ¶glish&amp;quot;)
    }
}
func (r rbmap[K, V]) CheckInvariants() {
    if r.root.color != B {
        panic(&amp;quot;root must be black&amp;quot;)
    }
    ys := make([]int, 0)
    xs := &amp;amp;ys
    r.check(r.root, 0, xs)
    i := 1
    for i &amp;lt; len(*xs) {
        if (*xs)[i-1] != (*xs)[i] {
            fmt.Println(xs)
            panic(&amp;quot;black height not same for all the leaves&amp;quot;)
        }
        i++
    }
}
func (r rbmap[K, V]) check(n *node[K, V], bh int, xs *[]int) {
    if n == r.leaf {
        *xs = append(*xs, bh)
        return
    }
    if n.color == R {
        if !colors(n, n.a, n.b, R, B, B) {
            r.Preorder()
            fmt.Println(n, n.a, n.b)
            panic(&amp;quot;red node without both children black&amp;quot;)
        }
    }
    if n.color == B {
        bh += 1
    }
    r.check(n.a, bh, xs)
    r.check(n.b, bh, xs)
}

func main() {
    a := New[int, string](func(x, y int) bool { return x &amp;lt; y })
    a.Set(12, &amp;quot;twelve&amp;quot;)
    b := New[string, int](func(x, y string) bool { return x &amp;lt; y })
    b.Set(&amp;quot;twelve&amp;quot;, 12)
    b.Set(&amp;quot;a&amp;quot;, 12)
    b.Set(&amp;quot;b&amp;quot;, 12)
    b.(*rbmap[string, int]).Preorder()
    fmt.Println(a, b)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
